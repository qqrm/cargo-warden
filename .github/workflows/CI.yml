name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-actionlint@v1
        with:
          reporter: github-check
          github_token: ${{ secrets.GITHUB_TOKEN }}
  cargo-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
      - run: ./scripts/check_path_versions.sh
      - run: sudo apt-get update && sudo apt-get install -y pkg-config libseccomp-dev protobuf-compiler jq xxhash
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-machete
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-udeps
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-spellcheck
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - name: cargo fmt --all -- --check
        id: cargo_fmt
        run: cargo fmt --all -- --check
        continue-on-error: true
      - name: cargo check --tests --benches
        id: cargo_check
        run: cargo check --tests --benches
        continue-on-error: true
      - name: cargo clippy --all-targets --all-features -- -D warnings
        id: cargo_clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        continue-on-error: true
      - name: cargo nextest run
        id: cargo_nextest
        run: cargo nextest run
        continue-on-error: true
      - name: cargo machete
        id: cargo_machete
        run: cargo machete
        continue-on-error: true
      - name: cargo audit
        id: cargo_audit
        run: cargo audit
        continue-on-error: true
      - name: cargo deny check --disable-fetch
        id: cargo_deny
        run: |
          set -eu
          cargo deny fetch
          cargo deny check --disable-fetch
        shell: bash
        continue-on-error: true
      - name: cargo llvm-cov --no-report
        id: cargo_llvm_cov
        run: cargo llvm-cov --no-report
        continue-on-error: true
      - name: cargo spellcheck --code 1
        id: cargo_spellcheck
        run: cargo spellcheck --cfg .config/spellcheck.toml --code 1
        continue-on-error: true
      - uses: dtolnay/rust-toolchain@nightly
      - name: cargo +nightly udeps --all-targets --all-features
        id: cargo_udeps
        run: cargo +nightly udeps --all-targets --all-features
        continue-on-error: true
      - name: Aggregate cargo-checks results
        if: always()
        run: |
          set -eu
          failures_file="$(mktemp)"
          trap 'rm -f "$failures_file"' EXIT

          record_outcome() {
            outcome="$1"
            label="$2"
            if [ "$outcome" = "failure" ] || [ "$outcome" = "cancelled" ]; then
              printf '%s (%s)\n' "$label" "$outcome" >>"$failures_file"
            fi
          }

          record_outcome "${{ steps.cargo_fmt.outcome }}" "cargo fmt --all -- --check"
          record_outcome "${{ steps.cargo_check.outcome }}" "cargo check --tests --benches"
          record_outcome "${{ steps.cargo_clippy.outcome }}" "cargo clippy --all-targets --all-features -- -D warnings"
          record_outcome "${{ steps.cargo_nextest.outcome }}" "cargo nextest run"
          record_outcome "${{ steps.cargo_machete.outcome }}" "cargo machete"
          record_outcome "${{ steps.cargo_audit.outcome }}" "cargo audit"
          record_outcome "${{ steps.cargo_deny.outcome }}" "cargo deny check --disable-fetch"
          record_outcome "${{ steps.cargo_llvm_cov.outcome }}" "cargo llvm-cov --no-report"
          record_outcome "${{ steps.cargo_spellcheck.outcome }}" "cargo spellcheck --cfg .config/spellcheck.toml --code 1"
          record_outcome "${{ steps.cargo_udeps.outcome }}" "cargo +nightly udeps --all-targets --all-features"

          if [ -s "$failures_file" ]; then
            {
              echo "## Failed checks"
              while IFS= read -r line; do
                echo "- $line"
              done <"$failures_file"
            } >>"$GITHUB_STEP_SUMMARY"

            echo "The following checks failed:"
            while IFS= read -r line; do
              echo "  - $line"
            done <"$failures_file"
            exit 1
          fi

  examples:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y pkg-config libseccomp-dev protobuf-compiler
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: ./run_examples.sh

  fuzz:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y pkg-config libseccomp-dev protobuf-compiler clang llvm
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
      - run: cargo install cargo-fuzz
      - run: cargo fuzz build net
